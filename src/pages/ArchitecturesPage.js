import React from 'react';
import { Link } from 'react-router-dom';
import './styles/ArchitecturesPage.css';
import GlossaryPopup from '../components/GlossaryPopup';


const ArchitecturesPage = () => {
  return (
    <div className="architectures-page">
      <header className="page-header">
        <h1>Архітектури діпфейк моделей</h1>
      </header>

      <main className="content">
        <section className="architecture-section">
            <h2>1. <GlossaryPopup term="Generative Adversarial Networks"/> (GAN)</h2>
            <div className="architecture-details">
            <div className="text-content">
                <p>
                    Архітектура GAN складається з двох взаємозалежних нейронних мереж — генератора та дискримінатора, які функціонують у режимі змагання. Генератор генерує зображення, починаючи з латентного шуму, що не має внутрішньої структури. В свою чергу дискримінатор оцінює ці зображення на предмет їх подібності до реальних зразків, здійснюючи бінарну класифікацію. Постійне взаємне коригування поступово навчає обидві моделі і приводить до появи зразків, що дедалі важче відрізнити від автентичних.
                </p>
                <p>
                    GAN-моделі особливо ефективні у відтворенні людських облич. Завдяки навчанню на зображеннях з різним освітленням, ракурсом і виразам обличчя, ці мережі здатні симулювати варіативну міміку, природні переходи та дрібні рухи, що додає симуляції достовірності.
                </p>
            </div>
            <div className="image-content">
                <img src="assets/images/GAN.png" alt="GAN architecture diagram" />
            </div>
            </div>
        </section>

        <section className="architecture-section">
            <h2>2. Автокодери (<GlossaryPopup term="Autoencoders"/>)</h2>
            <div className="architecture-details">
            <div className="text-content">
                <p>
                    Структурно автокодер складається з двох основних компонентів: енкодера, який стискає вхідні дані до латентного простору, та декодера, що реконструює зображення з цієї абстрактної репрезентації. У діпфейк-застосуваннях їх ключова перевага — здатність відокремлювати інваріантні ознаки (рухи, міміка, позиція голови) від ідентифікаційних характеристик (риси обличчя).
                </p>
                <p>
                    При використанні двох автокодерів із загальним енкодером, але різними декодерами, досягається ефект заміни облич: вирази збережено, але сам образ трансформовано. Така техніка дозволяє проводити реалістичну підміну без помітних артефактів у динаміці.
                </p>
            </div>
            <div className="image-content">
                <img src="assets/images/Autoencoder.png" alt="Autoencoder architecture diagram" />
            </div>
            </div>
        </section>

        <section className="architecture-section">
            <h2>3. Варіаційні автокодери (<GlossaryPopup term="VAE"/>)</h2>
            <div className="architecture-details">
            <div className="text-content">
                <p>
                    Варіаційні автокодери розширюють класичну архітектуру шляхом запровадження статистичної похибки. Замість одного детермінованого вектора вони генерують розподіл імовірності для кожної латентної ознаки, що дозволяє моделі створювати варіативні, але взаємно пов'язані варіації зображень. У діпфейк-сценаріях VAE застосовуються тоді, коли важливо зберігати не лише фотореалізм, а й еволюційний ефект — старіння, омолодження, зміна статі, стилізація.
                </p>
                <p>
                    Перевагою варіаційних автокодерів є контрольована генерація: навіть незначні зміни в латентному просторі спричиняють плавну трансформацію візуального образу. Це дозволяє не лише симулювати зовнішність, а й моделювати її розвиток у часі або альтернативні сценарії зовнішнього вигляду.
                </p>
            </div>
            <div className="image-content">
                <img src="assets/images/VAE.png" alt="VAE architecture diagram" />
            </div>
            </div>
        </section>

        <section className="architecture-section">
            <h2>4. Рекурентні нейромережі (<GlossaryPopup term="RNN"/>)</h2>
            <div className="architecture-details">
            <div className="text-content">
                <p>
                    Стандартні нейромережі не мають пам’яті попередніх станів, що унеможливлює моделювання темпоральної послідовності — ключового елементу відео. RNN усувають цю обмеженість завдяки рекурентному зв'язку, яке дозволяє кожному новому стану враховувати попередній. У діпфейк-відео це особливо важливо для збереження синхронності рухів губ, спрямування погляду, мікродинаміки м’язів обличчя.
                </p>
                <p>
                    У складніших системах RNN інтегруються з механізмами уваги (attention), які дозволяють моделі розподіляти обчислювальні ресурси на найбільш критичні зони кадру — очі, ротову порожнину, лінію підборіддя. Це підвищує як точність, так і візуальну стабільність при генерації.
                </p>
            </div>
            <div className="image-content">
                <img src="assets/images/RNN.png" alt="RNN architecture diagram" />
            </div>
            </div>
        </section>

        <section className="architecture-section">
            <h2>5. Потокові моделі (<GlossaryPopup term="Flow-based Models"/>)</h2>
            <div className="architecture-details">
            <div className="text-content">
                <p>
                    На відміну від інших генеративних архітектур, які працюють із наближеннями або стохастичними уявленнями, потокові моделі зберігають оберненість трансформацій. Вхідний шум перетворюється на зображення, і з тим самим рівнем точності процес може бути оберненим. Це забезпечує повний контроль над латентним простором і дозволяє виконувати маніпуляції в реальному часі.
                </p>
                <p>
                    Flow-based архітектури використовуються там, де необхідна інтерактивність без втрати якості: у застосунках для відеочатів, цифрових аватарів або адаптивних голограм. Будь-яка зміна вхідного вектора — нахил голови, зміна виразу — миттєво відображається на екрані, без втрати цілісності структури зображення.
                </p>
            </div>
            <div className="image-content">
                <img src="assets/images/Flow-based NN.png" alt="Flow-based architecture diagram" />
            </div>
            </div>
        </section>
        </main>


        <footer className="page-footer">
            <Link to="/" className="back-link">Повернутися на головну сторінку</Link>
        </footer>
    </div>
  );
}

export default ArchitecturesPage;
